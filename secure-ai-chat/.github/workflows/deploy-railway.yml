name: Deploy to Railway

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  REGISTRY: ghcr.io

jobs:
  deploy-railway:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    outputs:
      railway_url: ${{ steps.deploy.outputs.railway_url }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Railway CLI
      run: |
        npm install -g @railway/cli

    - name: Railway Login
      run: |
        railway login --token ${{ secrets.RAILWAY_TOKEN }}

    - name: Deploy Backend to Railway
      id: deploy
      working-directory: backend
      run: |
        # RailwayÁí∞Â¢ÉÂ§âÊï∞Ë®≠ÂÆö
        railway variables set SECRET_KEY="${{ secrets.SECRET_KEY }}"
        railway variables set JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}"
        railway variables set ENCRYPTION_KEY="${{ secrets.ENCRYPTION_KEY }}"
        railway variables set OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
        
        # „Ç™„Éó„Ç∑„Éß„É≥Áí∞Â¢ÉÂ§âÊï∞
        if [ "${{ secrets.SMTP_HOST }}" != "" ]; then
          railway variables set SMTP_HOST="${{ secrets.SMTP_HOST }}"
          railway variables set SMTP_PORT="${{ secrets.SMTP_PORT }}"
          railway variables set SMTP_USERNAME="${{ secrets.SMTP_USERNAME }}"
          railway variables set SMTP_PASSWORD="${{ secrets.SMTP_PASSWORD }}"
        fi
        
        # „Éá„Éó„É≠„Ç§ÂÆüË°å
        railway up --detach
        
        # „Éá„Éó„É≠„Ç§Áä∂Ê≥ÅÁ¢∫Ë™ç
        echo "Waiting for deployment to complete..."
        sleep 60
        railway status
        
        # URLÂèñÂæó
        RAILWAY_URL=$(railway domain | head -n1)
        echo "Railway deployment URL: $RAILWAY_URL"
        echo "railway_url=$RAILWAY_URL" >> $GITHUB_OUTPUT

    - name: Verify Backend Health
      run: |
        echo "Checking backend health..."
        RAILWAY_URL="${{ steps.deploy.outputs.railway_url }}"
        
        # „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ (ÊúÄÂ§ß10ÂõûË©¶Ë°å)
        for i in {1..10}; do
          if curl -f "$RAILWAY_URL/health" > /dev/null 2>&1; then
            echo "‚úÖ Backend is healthy!"
            break
          else
            echo "‚è≥ Attempt $i: Backend not ready yet, waiting 30 seconds..."
            sleep 30
          fi
        done

    - name: Display DNS Configuration Instructions
      run: |
        echo "üîß Manual DNS Configuration Required in Lolipop:"
        echo ""
        echo "Add these CNAME records in Lolipop DNS management:"
        echo ""
        echo "| Subdomain | Type  | Value |"
        echo "|-----------|-------|-------|"
        echo "| api       | CNAME | ${{ steps.deploy.outputs.railway_url }} |"
        echo ""
        echo "üìã SSL certificates will be automatically generated by Railway"

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-railway
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: frontend
      run: npm ci

    - name: Build with environment variables
      working-directory: frontend
      env:
        NEXT_PUBLIC_API_URL: ${{ needs.deploy-railway.outputs.railway_url }}
        NEXT_PUBLIC_WS_URL: wss://${{ needs.deploy-railway.outputs.railway_url }}
      run: |
        echo "NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL" > .env.production
        echo "NEXT_PUBLIC_WS_URL=$NEXT_PUBLIC_WS_URL" >> .env.production
        npm run build

    - name: Install Vercel CLI
      run: npm install -g vercel

    - name: Deploy to Vercel
      working-directory: frontend
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      run: |
        # Vercel „Éá„Éó„É≠„Ç§
        vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --yes
        
        # „Éá„Éó„É≠„Ç§URLÁ¢∫Ë™ç
        VERCEL_URL=$(vercel --token ${{ secrets.VERCEL_TOKEN }} ls | grep production | awk '{print $2}')
        echo "Frontend deployed to: $VERCEL_URL"

    - name: Verify Frontend Deployment
      run: |
        echo "‚úÖ Frontend deployed to Vercel"
        echo "üåç Frontend URL: https://chat.dataibridge.com"
        echo "üîó API Backend: ${{ needs.deploy-railway.outputs.railway_url }}"
        echo ""
        echo "üîß DNS Configuration Required:"
        echo "chat.dataibridge.com CNAME cname.vercel-dns.com"

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-railway, deploy-frontend]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        username: 'GitHub Actions'
        icon_emoji: ':railway:'
        title: 'DataiBridge AI Chat - Railway Deployment'
        text: |
          Environment: ${{ github.event.inputs.environment || 'production' }}
          Status: ${{ job.status }}
          
          üöÇ Railway Backend: ${{ needs.deploy-railway.outputs.railway_url }}
          ‚ö° Vercel Frontend: https://chat.dataibridge.com
          
          üîß DNS Configuration Required:
          - Add CNAME: api.dataibridge.com ‚Üí Railway URL
          - Add CNAME: chat.dataibridge.com ‚Üí cname.vercel-dns.com
          
          SSL certificates automatically generated!
          
          üéØ Next Steps:
          1. Update DNS records in Lolipop
          2. Test application functionality
          3. Monitor deployment status
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}