# ==============================================================================
# Docker Compose Configuration
# Secure AI Chat - Local Development Environment
# ==============================================================================

version: '3.8'

services:
  # ==============================================================================
  # Database Services
  # ==============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: secure-ai-chat-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: secure_ai_chat
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - secure-ai-chat-network

  redis:
    image: redis:7.2-alpine
    container_name: secure-ai-chat-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - secure-ai-chat-network

  # ==============================================================================
  # Application Services
  # ==============================================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runtime
    container_name: secure-ai-chat-backend
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/secure_ai_chat
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # Security
      SECRET_KEY: dev-secret-key-change-in-production
      JWT_SECRET_KEY: dev-jwt-secret-key
      ENCRYPTION_KEY: dev-encryption-key-32-bytes-long
      
      # Application
      APP_NAME: "Secure AI Chat (Dev)"
      ENVIRONMENT: development
      LOG_LEVEL: DEBUG
      
      # API Keys (Development - use your own)
      OPENAI_API_KEY: ${OPENAI_API_KEY:-sk-your-openai-key-here}
      AZURE_OPENAI_API_KEY: ${AZURE_OPENAI_API_KEY:-your-azure-key}
      AZURE_OPENAI_ENDPOINT: ${AZURE_OPENAI_ENDPOINT:-https://your-resource.openai.azure.com}
      
      # Email (Development)
      SMTP_HOST: ${SMTP_HOST:-smtp.mailtrap.io}
      SMTP_PORT: ${SMTP_PORT:-2525}
      SMTP_USERNAME: ${SMTP_USERNAME:-your-mailtrap-username}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-your-mailtrap-password}
      
      # Stripe (Test keys)
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-sk_test_your_stripe_key}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET:-whsec_your_webhook_secret}
      
      # Development settings
      DEBUG: "true"
      RELOAD: "true"
    volumes:
      - ./backend:/app:cached
      - backend_logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - secure-ai-chat-network
    command: |
      sh -c "
        echo 'Waiting for database to be ready...'
        while ! nc -z postgres 5432; do sleep 1; done
        echo 'Database is ready!'
        
        echo 'Running database migrations...'
        alembic upgrade head
        
        echo 'Starting application...'
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: runtime
    container_name: secure-ai-chat-frontend
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - secure-ai-chat-network
    environment:
      - API_BASE_URL=http://backend:8000

  # ==============================================================================
  # Development Tools
  # ==============================================================================
  adminer:
    image: adminer:latest
    container_name: secure-ai-chat-adminer
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - secure-ai-chat-network

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: secure-ai-chat-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8082:8081"
    depends_on:
      - redis
    networks:
      - secure-ai-chat-network

# ==============================================================================
# Networks and Volumes
# ==============================================================================
networks:
  secure-ai-chat-network:
    driver: bridge
    name: secure-ai-chat-network

volumes:
  postgres_data:
    name: secure-ai-chat-postgres-data
  redis_data:
    name: secure-ai-chat-redis-data
  backend_logs:
    name: secure-ai-chat-backend-logs