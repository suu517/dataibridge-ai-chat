# ==============================================================================
# Kubernetes ConfigMap Configuration
# Secure AI Chat - Application Configuration
# ==============================================================================

apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: secure-ai-chat-prod
  labels:
    app.kubernetes.io/name: secure-ai-chat
    app.kubernetes.io/component: config
data:
  # Application Configuration
  APP_NAME: "Secure AI Chat"
  APP_VERSION: "1.0.0"
  ENVIRONMENT: "production"
  
  # API Configuration
  API_V1_STR: "/api/v1"
  
  # CORS Configuration
  ALLOWED_ORIGINS: '["https://secure-ai-chat.com", "https://app.secure-ai-chat.com"]'
  
  # Session Configuration
  SESSION_TIMEOUT_MINUTES: "30"
  
  # Logging Configuration
  LOG_LEVEL: "INFO"
  LOG_FORMAT: "json"
  
  # AI Service Configuration
  DEFAULT_MODEL: "gpt-4"
  MAX_TOKENS: "2000"
  TEMPERATURE: "0.7"
  
  # Rate Limiting
  RATE_LIMIT_PER_MINUTE: "60"
  RATE_LIMIT_BURST: "10"
  
  # Database Configuration (non-sensitive)
  DB_POOL_SIZE: "20"
  DB_MAX_OVERFLOW: "30"
  DB_POOL_RECYCLE: "3600"
  
  # Redis Configuration
  REDIS_HOST: "redis"
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  REDIS_POOL_SIZE: "10"
  
  # Email Configuration (non-sensitive)
  SMTP_HOST: "smtp.sendgrid.net"
  SMTP_PORT: "587"
  SMTP_USE_TLS: "true"
  FROM_EMAIL: "noreply@secure-ai-chat.com"
  FROM_NAME: "Secure AI Chat"
  
  # Monitoring Configuration
  ENABLE_METRICS: "true"
  METRICS_PORT: "9090"
  HEALTH_CHECK_PATH: "/health"
  
  # Feature Flags
  ENABLE_REGISTRATION: "true"
  ENABLE_TRIAL: "true"
  ENABLE_ANALYTICS: "true"
  ENABLE_CACHE: "true"
  
  # Timezone
  TZ: "Asia/Tokyo"

---
# Nginx Configuration ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: secure-ai-chat-prod
  labels:
    app.kubernetes.io/name: secure-ai-chat
    app.kubernetes.io/component: nginx
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 1024;
        multi_accept on;
        use epoll;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Logging
        log_format json_combined escape=json
        '{'
          '"time_local":"$time_local",'
          '"remote_addr":"$remote_addr",'
          '"remote_user":"$remote_user",'
          '"request":"$request",'
          '"status": "$status",'
          '"body_bytes_sent":"$body_bytes_sent",'
          '"request_time":"$request_time",'
          '"http_referrer":"$http_referer",'
          '"http_user_agent":"$http_user_agent"'
        '}';
        
        access_log /var/log/nginx/access.log json_combined;
        error_log /var/log/nginx/error.log warn;
        
        # Performance
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        server_tokens off;
        
        # Gzip
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_comp_level 6;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
        
        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
        
        upstream backend {
            server backend:8000;
            keepalive 32;
        }
        
        server {
            listen 80;
            server_name _;
            root /usr/share/nginx/html;
            
            # Security headers
            add_header X-Frame-Options DENY always;
            add_header X-Content-Type-Options nosniff always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header Referrer-Policy "strict-origin-when-cross-origin" always;
            
            location / {
                try_files $uri $uri/ /index.html;
            }
            
            location /api/ {
                limit_req zone=api burst=20 nodelay;
                proxy_pass http://backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
        }
    }

---
# Logging Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: logging-config
  namespace: secure-ai-chat-prod
  labels:
    app.kubernetes.io/name: secure-ai-chat
    app.kubernetes.io/component: logging
data:
  logging.yaml: |
    version: 1
    disable_existing_loggers: false
    formatters:
      json:
        format: '{"time": "%(asctime)s", "level": "%(levelname)s", "logger": "%(name)s", "message": "%(message)s", "module": "%(module)s", "function": "%(funcName)s", "line": %(lineno)d}'
        datefmt: '%Y-%m-%d %H:%M:%S'
      standard:
        format: '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        level: INFO
        formatter: json
        stream: ext://sys.stdout
      file:
        class: logging.handlers.RotatingFileHandler
        level: INFO
        formatter: json
        filename: /app/logs/app.log
        maxBytes: 10485760  # 10MB
        backupCount: 5
    root:
      level: INFO
      handlers: [console]
    loggers:
      app:
        level: INFO
        handlers: [console, file]
        propagate: false
      uvicorn:
        level: INFO
        handlers: [console]
        propagate: false
      fastapi:
        level: INFO
        handlers: [console]
        propagate: false